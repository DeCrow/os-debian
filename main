#!/bin/bash

# Params list (use "-p" or "--params")
# 1  - Set server hostname
# 2  - Set server SSH Port
# 3  - Set server timezone
# 4  - Upgrade OS? (for yes "true")
# 5  - Disable IPv6? (for yes "true")
# 6  - Allow ping only that length
# 7  - Redirect URL from 80 port
# 8  - Custom MOTD (for clean: "clean"):
# 9  - Protect ports non SSH (sep. by ",")
# 10 - Clients IP whitelist (sep. by ",")
# 11 - Show full stdout? (for yes "true")

# Get init mode param
param_mode=${1}

# Set user params
if [[ "$param_mode" == "-p" ]] || [[ "$param_mode" == "--params" ]]; then
  param_host_name=${2}
  param_ssh_port=${3}
  param_time_zone=${4}
  param_upgrade_os=${5}
  param_ipv6_disable=${6}
  param_ping_length=${7}
  param_redirect_url=${8}
  param_custom_motd=${9}
  param_knockd_ports=${10}
  param_whitelist_ips=${11}
  param_full_info=${12}
else
  echo "### Enter parameters or leave blank for no changes (11 steps)"
  read -rp "1.  Hostname: " param_host_name
  read -rp "2.  SSH port: " param_ssh_port
  read -rp "3.  Timezone: " param_time_zone
  read -rp "4.  Upgrade OS?: " param_upgrade_os
  read -rp "5.  Disable IPv6?: " param_ipv6_disable
  read -rp "6.  Allow ping length: " param_ping_length
  read -rp "7.  URL redirection to: " param_redirect_url
  read -rp "8.  Custom MOTD (for clean: \"clean\"): " param_custom_motd
  read -rp "9.  Protect ports non SSH sep. by \",\": " param_knockd_ports
  read -rp "10. Clients IP whitelist sep. by \",\" (you IP - $(echo "${SSH_CLIENT}" | awk '{ print $1}')): " param_whitelist_ips
  read -rp "11. Show full stdout? (errors/warnings displayed anyway): " param_full_info
fi

# Print params
cGreen="\e[1;32m"
cYellow="\e[1;33m"
cRed="\e[1;91m"
cEnd="\e[0m"

# Modify params
if [ -z "${param_ipv6_disable}" ]; then param_ipv6_disable="false"; else param_ipv6_disable="true"; fi
if [ -z "${param_upgrade_os}" ]; then param_upgrade_os="false"; else param_upgrade_os="true"; fi

param_host_ip=$(ip addr show | grep 'inet ' | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1); print_host_ip=${cYellow}${param_host_ip}${cEnd}
if [ -z "${param_host_name}" ]; then print_host_name="${cRed}no change${cEnd}"; else print_host_name="${cYellow}${param_host_name}${cEnd}"; fi
if [ -z "${param_ssh_port}" ]; then print_ssh_port="${cRed}no change${cEnd}"; else print_ssh_port="${cYellow}${param_ssh_port}${cEnd}"; fi
if [ -z "${param_time_zone}" ]; then print_time_zone="${cRed}no change${cEnd}"; else print_time_zone="${cYellow}${param_time_zone}${cEnd}"; fi
if [[ "$param_upgrade_os" == "false" ]]; then print_upgrade_os="${cRed}no change${cEnd}"; else print_upgrade_os="${cYellow}${param_upgrade_os}${cEnd}"; fi
if [[ "$param_ipv6_disable" == "false" ]]; then print_ipv6_disable="${cRed}no change${cEnd}"; else print_ipv6_disable="${cYellow}${param_ipv6_disable}${cEnd}"; fi
if [ -z "${param_ping_length}" ]; then print_ping_length="${cRed}no change${cEnd}"; else print_ping_length="${cYellow}${param_ping_length}${cEnd}"; fi
if [ -z "${param_redirect_url}" ]; then print_redirect_url="${cRed}no change${cEnd}"; else print_redirect_url="${cYellow}${param_redirect_url}${cEnd}"; fi
if [ -z "${param_custom_motd}" ]; then print_custom_motd="${cRed}no change${cEnd}"; else print_custom_motd="${cYellow}${param_custom_motd}${cEnd}"; fi
if [ -z "${param_knockd_ports}" ]; then print_knockd_ports="${cRed}no change${cEnd}"; else print_knockd_ports="${cYellow}${param_knockd_ports}${cEnd}"; fi
if [ -z "${param_whitelist_ips}" ]; then print_whitelist_ips="${cRed}no change${cEnd}"; else print_whitelist_ips="${cYellow}${param_whitelist_ips}${cEnd}"; fi
if [ -z "${param_full_info}" ]; then print_full_info="${cRed}no change${cEnd}"; else print_full_info="${cYellow}${param_full_info}${cEnd}"; fi

echo "=================================================="
echo -e "${cGreen}#.  Host IP:          ${print_host_ip}"
echo -e "${cGreen}1.  Host name:        ${print_host_name}"
echo -e "${cGreen}2.  SSH port:         ${print_ssh_port}"
echo -e "${cGreen}3.  Timezone:         ${print_time_zone}"
echo -e "${cGreen}4.  Upgrade OS:       ${print_upgrade_os}"
echo -e "${cGreen}5.  Disable IPv6:     ${print_ipv6_disable}"
echo -e "${cGreen}6.  Ping length:      ${print_ping_length}"
echo -e "${cGreen}7.  Redirect URL:     ${print_redirect_url}"
echo -e "${cGreen}8.  Custom MOTD:      ${print_custom_motd}"
echo -e "${cGreen}9.  Protect ports:    ${print_knockd_ports}"
echo -e "${cGreen}10. Whitelist IP:     ${print_whitelist_ips}"
echo -e "${cGreen}11. Show full stdout: ${print_full_info}"
echo "=================================================="

if ! [[ "$param_mode" == "-p" ]] && ! [[ "$param_mode" == "--params" ]]; then
  while true; do
    read -rp "It is all OK? Can we proceed? [y|n]: " yn
    case $yn in
    [Yy]*) break ;;
    [Nn]*) exit ;;
    *) echo "It is all OK? Can we proceed? [y|n]: " ;;
    esac
  done
fi

# Update
echo -e "${cGreen}* Update package sources list...${cEnd}"
if [[ "$param_full_info" == "true" ]]; then
  apt-get -y update
else
  apt-get -y update > /dev/null
fi

# Upgrade
if [[ "$param_upgrade_os" == "true" ]]; then
  echo -e "${cGreen}* Upgrades packages...${cEnd}"
  if [[ "$param_full_info" == "true" ]]; then
    apt-get -y upgrade
    apt-get -y dist-upgrade
  else
    apt-get -y upgrade > /dev/null
    apt-get -y dist-upgrade > /dev/null
  fi
fi

# Install dependencies
echo -e "${cGreen}* Installing dependencies...${cEnd}"
if [[ "$param_full_info" == "true" ]]; then
  apt-get -y install curl sed wget
else
  apt-get -y install curl sed wget > /dev/null
fi

# Set hostname
if [ -n "${param_host_name}" ]; then
  echo "${param_host_name}" >/etc/hostname
  echo "127.0.0.1 localhost" >/etc/hosts
  echo "${param_host_ip} ${param_host_name}" >>/etc/hosts
fi

# Set custom MOTD
if [ -n "${param_custom_motd}" ]; then
  curl -s "https://raw.githubusercontent.com/DeCrow/os-debian/main/content/motd/${param_custom_motd}" >/etc/motd
fi

# Set timezone
if [ -n "${param_time_zone}" ]; then
  timedatectl set-timezone "${param_time_zone}"
fi

# Configure firewall
if [[ "$param_ipv6_disable" == "true" ]] || [ -n "${param_ping_length}" ] || [ -n "${param_knockd_ports}" ] || [ -n "${param_whitelist_ips}" ]; then
  firewall="true"
  echo -e "${cGreen}* Installing UFW firewall...${cEnd}"
  if [[ "$param_full_info" == "true" ]]; then
    apt-get -y install ufw
  else
    apt-get -y install ufw > /dev/null
  fi
  ufw default deny incoming
  ufw default allow outgoing
fi

# Set new SSH port
if [ -n "${param_ssh_port}" ]; then
  sed -i "s/#Port/Port/g" /etc/ssh/sshd_config
  sed -i "s/Port [0-9]*/Port ${param_ssh_port}/g" /etc/ssh/sshd_config
  if [ -n "${firewall}" ]; then
    ufw allow "${param_ssh_port}"/tcp
  fi
else
  if [ -n "${firewall}" ]; then
    ufw allow ssh
  fi
fi

# Add IP to whitelist
if [ -n "${param_whitelist_ips}" ]; then
  for ip in ${param_whitelist_ips//,/ }; do
      ufw allow from "${ip}" to any
  done
fi

# Disable IPV6 protocol
if [[ "$param_ipv6_disable" == "true" ]]; then
  sed -i 's/IPV6=yes/IPV6=no/g' /etc/default/ufw
  echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
  sysctl -p
fi

# Allow ping length
if [ -n "${param_ping_length}" ]; then
  length=$((param_ping_length+28))
  sed -i '/ufw-before-input.*icmp/s/ACCEPT/DROP/g' /etc/ufw/before.rules
  sed -i "/^\# End required lines/a \\\n# allow ping length\n-I INPUT -p icmp -j DROP\n-I INPUT -p icmp -m length --length ${length} -j ACCEPT\n" /etc/ufw/before.rules
fi

# Set redirect
if [ -n "${param_redirect_url}" ]; then
  echo -e "${cGreen}* Installing NGINX...${cEnd}"
  if [[ "$param_full_info" == "true" ]]; then
    apt-get -y install nginx
  else
    apt-get -y install nginx > /dev/null
  fi
  curl -s "https://raw.githubusercontent.com/DeCrow/os-debian/main/content/nginx/default" >/etc/nginx/sites-available/default
  sed -i "s/REDIRECT_URL/${param_redirect_url}/g" "/etc/nginx/sites-available/default"
  systemctl restart nginx
  if [ -n "${firewall}" ]; then
    ufw allow 80/tcp
  fi
fi

# Configure fail2ban
if [ -n "${param_knockd_ports}" ]; then
  echo -e "${cGreen}* Installing FAIL2BAN...${cEnd}"
  if [[ "$param_full_info" == "true" ]]; then
    apt-get -y install fail2ban
  else
    apt-get -y install fail2ban > /dev/null
  fi
  cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
  curl -s "https://raw.githubusercontent.com/DeCrow/os-debian/main/content/fail2ban/jail.local" >>/etc/fail2ban/jail.local
  wget -q -O "/etc/fail2ban/action.d/ssh-ufw.conf" "https://raw.githubusercontent.com/DeCrow/os-debian/main/content/fail2ban/ssh-ufw.conf"
  sed -i 's/enabled = true/enabled = false/g' /etc/fail2ban/jail.d/defaults-debian.conf
  systemctl restart fail2ban
fi

# Configure knockd
if [ -n "${param_knockd_ports}" ]; then
  echo -e "${cGreen}* Installing KNOCKD...${cEnd}"
  if [[ "$param_full_info" == "true" ]]; then
    apt-get -y install knockd
  else
    apt-get -y install knockd > /dev/null
  fi
  wget -q -O /etc/knockd.conf 'https://raw.githubusercontent.com/DeCrow/os-debian/main/content/knockd/knockd.conf' > /dev/null
  for port in ${param_knockd_ports//,/ }; do
    {
      echo "[protection_port_${port}]"
      echo "    sequence    = ${port}"
      echo "    seq_timeout = 5"
      echo "    command     = /sbin/ufw insert 1 deny from %IP% to any"
      echo ""
    } >>/etc/knockd.conf
  done
  curl -s "https://raw.githubusercontent.com/DeCrow/os-debian/main/content/knockd/knockd.service" >/usr/lib/systemd/system/knockd.service
  sed -i 's/START_KNOCKD=0/START_KNOCKD=1/g' /etc/default/knockd
  interface=$(ip -br l | awk '$1 !~ "lo|vir|wl" { print $1}')
  sed -i "s/#KNOCKD_OPTS=\"-i eth1\"/KNOCKD_OPTS=\"-i ${interface}\"/g" /etc/default/knockd
  systemctl enable systemd-networkd-wait-online.service
  systemctl daemon-reload
  systemctl enable knockd
  systemctl start knockd
fi

# Turn ON the firewall
if [[ "$param_ipv6_disable" == "true" ]] || [ -n "${param_ping_length}" ] || [ -n "${param_knockd_ports}" ] || [ -n "${param_whitelist_ips}" ]; then
  echo -e "${cGreen}* Turning ON the UFW...${cEnd}"
  echo "y" | ufw enable > /dev/null
fi

echo -e "${cGreen}*** SEQUENCE COMPLETE ***${cEnd}"